{"version":3,"sources":["Components/AppLogo.js","Context/MovieContext.js","Components/Search.js","Components/Profile.js","Components/Header.js","Components/MovieTile.js","Components/MovieGenreRow.js","Components/Movies.js","Components/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["AppLogo","href","onClick","e","preventDefault","className","MovieContext","createContext","MovieState","children","useState","search","setSearch","trendingMovies","setTrendingMovies","dramaMovies","setDramaMovies","actionMovies","setActionMovies","animationMovies","setAnimationMovies","movies","setMovies","searchByGenre","setSearchByGenre","moviesTitle","setMoviesTitle","API_KEY","getTrendingMovies","a","trim","fetch","response","json","data","getDramaMovies","getActionMovies","getAnimationMovies","handleSearch","results","length","useEffect","Provider","value","handleSeeAllClick","title","Search","useContext","onSubmit","type","placeholder","onChange","target","Profile","Header","MovieTile","image","vote_average","release_date","src","alt","Date","getFullYear","MovieGenreRow","slice","map","movieItem","index","poster_path","key","id","Movies","MainContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b964adf.chunk.js","sourcesContent":["import React from 'react'\n\nfunction AppLogo() {\n    return (\n        <a href=\"\" onClick={(e) => e.preventDefault}>\n            <div className=\"app-logo\">\n                <i className=\"material-icons md-36 logo-icon\">movie_creation</i>\n                <h3>Movie Search</h3>\n            </div>\n        </a>\n    )\n}\n\nexport default AppLogo","import React, { useState, useEffect, createContext } from 'react';\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieState = ({children}) => {\r\n    const [search, setSearch] = useState('');\r\n    const [trendingMovies, setTrendingMovies] = useState([]);\r\n    const [dramaMovies, setDramaMovies] = useState([]);\r\n    const [actionMovies, setActionMovies] = useState([]);\r\n    const [animationMovies, setAnimationMovies] = useState([]);\r\n    const [movies, setMovies] = useState([]);\r\n    const [searchByGenre, setSearchByGenre] = useState(true);\r\n    const [moviesTitle, setMoviesTitle] = useState('');\r\n\r\n    const API_KEY = \"3496e3d67955f61342839148def172b1\";\r\n\r\n    const getTrendingMovies = async () => {\r\n        if (search.trim() === '') {\r\n            const response = await fetch(`https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`)\r\n            const data = await response.json()\r\n            setTrendingMovies(data)\r\n        }  \r\n    }\r\n\r\n    const getDramaMovies = async () => {\r\n        if (search.trim() === '') {\r\n            const response = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=18&sort_by=vote_average.desc`)\r\n            const data = await response.json()\r\n            setDramaMovies(data)\r\n        }  \r\n    }\r\n\r\n    const getActionMovies = async () => {\r\n        if (search.trim() === '') {\r\n            const response = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=28&sort_by=vote_average.desc`)\r\n            const data = await response.json()\r\n            setActionMovies(data)\r\n        }  \r\n    }\r\n\r\n    const getAnimationMovies = async () => {\r\n        if (search.trim() === '') {\r\n            const response = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=16&sort_by=vote_average.desc`)\r\n            const data = await response.json()\r\n            setAnimationMovies(data)\r\n        }  \r\n    }\r\n\r\n    const handleSearch = async (e) => {\r\n        e.preventDefault();\r\n        if(search.trim() !== ''){\r\n            const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${search}`)\r\n            const data = await response.json();\r\n            if(data.results && data.results.length > 0){\r\n                setMovies(data);\r\n                setMoviesTitle('Search Results for: \"' + search.trim() + '\"');\r\n                setSearchByGenre(false);\r\n            } else{\r\n                setMoviesTitle('No Results Found For: \"' + search.trim() + '\"');\r\n                setSearchByGenre(false);\r\n            }           \r\n        }\r\n    }\r\n\r\n    const handleSeeAllClick = (e, data, title) => {\r\n        e.preventDefault();\r\n        setSearchByGenre(false);\r\n        setMoviesTitle(title);\r\n        setMovies(data);\r\n    }\r\n\r\n    useEffect (() => {\r\n        getTrendingMovies()\r\n    }, [])\r\n\r\n    useEffect (() => {\r\n        getDramaMovies()\r\n    }, [])\r\n\r\n    useEffect (() => {\r\n        getActionMovies()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getAnimationMovies();\r\n    }, [])\r\n\r\n    return (\r\n        <MovieContext.Provider\r\n            value={{\r\n                search,\r\n                setSearch,\r\n                trendingMovies,\r\n                setTrendingMovies,\r\n                handleSearch,\r\n                dramaMovies,\r\n                setDramaMovies,\r\n                actionMovies,\r\n                setActionMovies,\r\n                animationMovies,\r\n                setAnimationMovies,\r\n                searchByGenre,\r\n                setSearchByGenre,\r\n                movies,\r\n                setMovies,\r\n                handleSeeAllClick,\r\n                moviesTitle,\r\n                setMoviesTitle\r\n            }}>\r\n            {children}\r\n        </MovieContext.Provider>\r\n    )\r\n}","import React, { useContext } from 'react'\nimport { MovieContext } from '../Context/MovieContext' \n\nfunction Search() {\n    const {search, setSearch, handleSearch} = useContext(MovieContext);\n\n    return (\n        <form onSubmit={handleSearch}>\n            <input \n                type=\"text\" \n                placeholder=\"Search movies\"\n                onChange={(e) => setSearch(e.target.value)}\n                value={search} />\n        </form>\n    )\n}\n\nexport default Search","import React from 'react'\n\nfunction Profile() {\n    return (\n        <div className=\"profile\">\n            <i className=\"material-icons-outlined md-32\">account_circle</i>\n        </div>\n    )\n}\n\nexport default Profile","import React from 'react'\nimport AppLogo from './AppLogo'\nimport Search from './Search'\nimport Profile from './Profile'\n\nfunction Header() {\n    return (\n        <div className=\"header-main\">\n            <AppLogo />\n            <Search />\n            <Profile />\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\n\nfunction MovieTile( {title, image, vote_average, release_date}) {\n    return (          \n        <div className=\"movie-tile\">\n            <div className=\"movie-poster\">\n                <img src={`https://image.tmdb.org/t/p/w300${image}`} alt=\"\"/>\n            </div>\n            <h5 className=\"movie-name\">{title}</h5>\n            <div className=\"tile-metadata\">\n                <p>{release_date !== '' ? new Date(release_date).getFullYear() : 'N/A'}</p>\n                <div className=\"dot-separator\">·</div>\n                <p>{vote_average}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieTile","import React, {useContext} from 'react'\nimport MovieTile from './MovieTile'\nimport { MovieContext } from '../Context/MovieContext'\n\nfunction MovieGenreRow() {\n    const { trendingMovies, dramaMovies, actionMovies, animationMovies, handleSeeAllClick } = useContext(MovieContext);\n\n    return (\n        <>\n            <div className=\"genre-row\">\n                <div className=\"genre-row-header\">\n                    <h3>Trending Movies</h3>\n                    <button className=\"row-button\" onClick={(e) => {handleSeeAllClick(e, trendingMovies, 'Trending Movies')}}>See all</button>\n                </div>\n                <div className=\"genre-row-content\">\n                    {trendingMovies.results && trendingMovies.results.slice(0, 5).map((movieItem, index) => (\n                        <MovieTile \n                            title={movieItem.title}\n                            image={movieItem.poster_path}\n                            key={index}\n                            id={movieItem.id}\n                            vote_average={movieItem.vote_average}\n                            release_date={movieItem.release_date} />\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"genre-row\">\n                <div className=\"genre-row-header\">\n                    <h3>Drama Movies</h3>\n                    <button className=\"row-button\" onClick={(e) => {handleSeeAllClick(e, dramaMovies, 'Drama Movies')}}>See all</button>\n                </div>\n                <div className=\"genre-row-content\">\n                    {dramaMovies.results && dramaMovies.results.slice(0, 5).map((movieItem, index) => (\n                        <MovieTile \n                            title={movieItem.title}\n                            image={movieItem.poster_path}\n                            key={index}\n                            id={movieItem.id}\n                            vote_average={movieItem.vote_average}\n                            release_date={movieItem.release_date} />\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"genre-row\">\n                <div className=\"genre-row-header\">\n                    <h3>Action Movies</h3>\n                    <button className=\"row-button\" onClick={(e) => {handleSeeAllClick(e, actionMovies, 'Action Movies')}}>See all</button>\n                </div>\n                <div className=\"genre-row-content\">\n                    {actionMovies.results && actionMovies.results.slice(0, 5).map((movieItem, index) => (\n                        <MovieTile \n                            title={movieItem.title}\n                            image={movieItem.poster_path}\n                            key={index}\n                            id={movieItem.id}\n                            vote_average={movieItem.vote_average}\n                            release_date={movieItem.release_date} />\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"genre-row\">\n                <div className=\"genre-row-header\">\n                    <h3>Animation Movies</h3>\n                    <button className=\"row-button\" onClick={(e) => {handleSeeAllClick(e, animationMovies, 'Animation Movies')}}>See all</button>\n                </div>\n                <div className=\"genre-row-content\">\n                    {animationMovies.results && animationMovies.results.slice(0, 5).map((movieItem, index) => (\n                        <MovieTile \n                            title={movieItem.title}\n                            image={movieItem.poster_path}\n                            key={index}\n                            id={movieItem.id}\n                            vote_average={movieItem.vote_average}\n                            release_date={movieItem.release_date} />\n                    ))}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default MovieGenreRow","import React, {useContext} from 'react'\r\nimport MovieTile from './MovieTile'\r\nimport { MovieContext } from '../Context/MovieContext'\r\n\r\nfunction Movies() {\r\n    const { movies, moviesTitle } = useContext(MovieContext);\r\n\r\n    return (\r\n            <div className=\"genre-row\">\r\n                <div className=\"genre-row-header\">\r\n                    <h3>{moviesTitle}</h3>\r\n                </div>\r\n                <div className=\"genre-row-content\">\r\n                    {movies.results && movies.results.map((movieItem, index) => (\r\n                        <MovieTile \r\n                            title={movieItem.title}\r\n                            image={movieItem.poster_path}\r\n                            key={index}\r\n                            id={movieItem.id}\r\n                            vote_average={movieItem.vote_average}\r\n                            release_date={movieItem.release_date} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Movies","import React, {useContext} from 'react'\nimport MovieGenreRow from './MovieGenreRow'\nimport Movies from './Movies'\nimport { MovieContext } from '../Context/MovieContext'\n\nfunction MainContent() {\n    const { searchByGenre } = useContext(MovieContext);\n    return (\n        <div className=\"main-container\">\n            {searchByGenre ?\n                <MovieGenreRow />\n                :\n                <Movies />\n            }\n        </div>\n    )\n}\n\nexport default MainContent","import React from 'react';\nimport Header from './Components/Header';\nimport MainContent from './Components/MainContent';\nimport { MovieState } from './Context/MovieContext'\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <MovieState>\n      <Header />\n      <MainContent />\n    </MovieState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}